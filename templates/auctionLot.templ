package templates

import "github.com/artemsmotritel/oktion/types"
import "github.com/artemsmotritel/oktion/utils"
import "github.com/artemsmotritel/oktion/templates/form"

templ auctionLotListItem(lot *types.AuctionLot) {
    <li class="grid narrow-row">
        <details>
            <summary role="button"
                if lot.IsActive {
                    class="outline contrast"
                } else {
                    class="outline secondary"
                }
            >{ lot.Name }</summary>
            <div role="group">
                <button class="outline">
                    View
                </button>
                <button
                    if lot.IsActive {
                        hx-get={ utils.ConvertToTemplStringURL("my-auctions", lot.AuctionID, "lots", lot.ID, "edit") }
                        hx-target="#main"
                        hx-swap="outerHTML"
                        hx-push-url={ utils.ConvertToTemplStringURL("my-auctions", lot.AuctionID, "lots", lot.ID, "edit") }
                    } else {
                        disabled
                    }
                >
                    Edit
                </button>
                <button
                    if lot.IsActive {
                        hx-post={ utils.ConvertToTemplStringURL("auctions", lot.AuctionID, "lots", lot.ID, "archive") }
                        hx-target="#auction-lots-section"
                        hx-swap="outerHTML"
                        hx-confirm="confirm-archive-auction-lot-dialog"
                    } else {
                        hx-post={ utils.ConvertToTemplStringURL("auctions", lot.AuctionID, "lots", lot.ID, "reinstate") }
                        hx-target="#auction-lots-section"
                        hx-swap="outerHTML"
                        hx-confirm="confirm-reinstate-auction-lot-dialog"
                    }
                    data-confirm-trigger="true"
                    class="secondary">
                    if lot.IsActive {
                        Archive
                    } else {
                        Reinstate
                    }
                </button>
            </div>
        </details>
    </li>
}

templ auctionLotEditPage(auctionLot *types.AuctionLot) {
    @main() {
        <section class="grid">
            <section>
                <h2>Photos</h2>
                if true {
                    <p>This auction lot doesn't have any photos yet</p>
                }
                <button class="secondary">Add a photo</button>
            </section>
            <section>
                <h2>Edit "{ auctionLot.Name }"</h2>
                @editAuctionLotForm(auctionLot, nil)
            </section>
        </section>
    }
}

var lotNameInput *form.Field = &form.Field{
	Name:            "name",
	Required:        true,
	ID:              "name-input",
	Type:            form.TextInputType,
	Placeholder:     "Lot name...",
	Autocomplete: form.OffAutocomplete,
}

var lotDescriptionInput *form.Field = &form.Field{
	Name:            "description",
	Required:        true,
	ID:              "description-input",
	Type:            form.TextAreaInputType,
	Placeholder:     "Lot description...",
	Autocomplete: form.OffAutocomplete,
}

var lotMinimalBidInput *form.Field = &form.Field{
    Name:            "minimalBid",
    ID:              "minimal-bid-input",
    Type:            form.NumberInputType,
    Placeholder:     "Lot minimal bid...",
    Autocomplete: form.OffAutocomplete,
    Min: "0",
    Step: "0.01",
    AriaDescribedBy: "minimalBid-helper",
}

var lotReservePriceInput *form.Field = &form.Field{
    Name:            "reservePrice",
    ID:              "reserve-price-input",
    Type:            form.NumberInputType,
    Placeholder:     "Lot reserve price...",
    Autocomplete: form.OffAutocomplete,
    Min: "0",
    Step: "0.01",
    AriaDescribedBy: "reservePrice-helper",
}

var lotBinPriceInput *form.Field = &form.Field{
    Name:            "binPrice",
    ID:              "bin-price-input",
    Type:            form.NumberInputType,
    Placeholder:     "Lot Buy It Now price...",
    Autocomplete: form.OffAutocomplete,
    Min: "0",
    Step: "0.01",
    AriaDescribedBy: "binPrice-helper",
}

templ editAuctionLotForm(auctionLot *types.AuctionLot, errors map[string]string) {
    <form id="auction-lot-form" hx-boost="true" hx-target="this" hx-swap="outerHTML"
        hx-put={ utils.ConvertToTemplStringURL("auctions", auctionLot.AuctionID, "lots", auctionLot.ID) }
    >
        @form.Label("Name", lotNameInput.ID) {
            @form.Input(lotNameInput.WithErrors(errors).Attributes(auctionLot.Name))
            if errors != nil {
                if err, ok := errors[lotNameInput.Name]; ok {
                    <small id={ lotNameInput.AriaDescribedBy }>{ err }</small>
                }
            }
        }
        @form.Label("Description", lotDescriptionInput.ID) {
            @form.Input(lotDescriptionInput.WithErrors(errors).Attributes(auctionLot.Description))
            if errors != nil {
                if err, ok := errors[lotDescriptionInput.Name]; ok {
                    <small id={ lotDescriptionInput.AriaDescribedBy }>{ err }</small>
                }
            }
        }
        @form.Label("Minimal Bid", lotMinimalBidInput.ID) {
            @form.Input(lotMinimalBidInput.WithErrors(errors).Attributes(auctionLot.MinimalBid))
            <small id={ lotMinimalBidInput.AriaDescribedBy }>
                if errors != nil {
                    if err, ok := errors[lotMinimalBidInput.Name]; ok {
                        { err }
                    } else {
                        { "Set 0 to disable" }
                    }
                } else {
                    { "Set 0 to disable" }
                }
            </small>
        }
        @form.Label("Reserve Price", lotReservePriceInput.ID) {
            @form.Input(lotReservePriceInput.WithErrors(errors).Attributes(auctionLot.ReservePrice))
            <small id={ lotReservePriceInput.AriaDescribedBy }>
            { "Set 0 to disable" }
            if errors != nil {
                if err, ok := errors[lotReservePriceInput.Name]; ok {
                    { "\n" + err }
                } else {
                    { "Set 0 to disable" }
                }
            } else {
                { "Set 0 to disable" }
            }
            </small>
        }
        @form.Label("Bin Price", lotBinPriceInput.ID) {
            @form.Input(lotBinPriceInput.WithErrors(errors).Attributes(auctionLot.BinPrice))
            <small id={ lotBinPriceInput.AriaDescribedBy }>
            { "Set 0 to disable" }
            if errors != nil {
                if err, ok := errors[lotBinPriceInput.Name]; ok {
                    { "\n" + err }
                } else {
                    { "Set 0 to disable" }
                }
            } else {
                { "Set 0 to disable" }
            }
            </small>
        }
        <input type="submit" value="Save changes" />
    </form>
}
