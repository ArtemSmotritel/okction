package templates

import "github.com/artemsmotritel/oktion/types"
import "github.com/artemsmotritel/oktion/utils"
import "github.com/artemsmotritel/oktion/templates/form"
import "strings"

templ editAuctionPage(auctionLots []types.AuctionLot, auction *types.Auction, errors map[string]string) {
    @main() {
        <section class="grid">
            @auctionLotsList(auction, auctionLots)
            <section>
                <h2>Edit your auction</h2>
                @createAuctionForm(false, auction, errors)
            </section>
        </section>
    }
    <dialog id="confirm-archive-auction-lot-dialog">
        <article>
            <header>
                <button
                aria-label="Close"
                rel="prev"
                value="cancel"
                onclick="toggleModal(event)"
                ></button>
                <h3>Confirm your action!</h3>
            </header>
            <p>
                Do you really want to archive this auction lot?
            </p>
            <footer>
                <button
                role="button"
                class="secondary"
                onclick="toggleModal(event)"
                value="cancel"
                >
                    Cancel
                </button>
                <button value="confirm" autofocus onclick="toggleModal(event)">
                    Confirm
                </button>
            </footer>
        </article>
    </dialog>
    <dialog id="confirm-reinstate-auction-lot-dialog">
        <article>
            <header>
                <button
                aria-label="Close"
                rel="prev"
                value="cancel"
                onclick="toggleModal(event)"
                ></button>
                <h3>Confirm your action!</h3>
            </header>
            <p>
                Do you really want to reinstate this auction lot?
            </p>
            <footer>
                <button
                role="button"
                class="secondary"
                onclick="toggleModal(event)"
                value="cancel"
                >
                    Cancel
                </button>
                <button value="confirm" autofocus onclick="toggleModal(event)">
                    Confirm
                </button>
            </footer>
        </article>
    </dialog>
}

templ auctionLotsList(auction *types.Auction, auctionLots []types.AuctionLot) {
    <section id="auction-lots-section">
        <h2>Auction lots</h2>
        <ul class="no-list-bullet-point" id="auction-lots-list">
            for _, lot := range auctionLots {
                if lot.IsActive {
                    @auctionLotListItem(&lot)
                    <hr />
                }
            }
        </ul>
        <!-- TODO: this thing needs to be removed after a user added his first auction -->
        if len(auctionLots) == 0 {
            <p>This auction doesn't have any lots yet</p>
        }
        <button type="button"
            hx-target="#auction-lots-archived-list"
            hx-swap="beforeend show:bottom"
            hx-post={ utils.ConvertToTemplStringURL("my-auctions", auction.ID, "lots") }
        >Add a lot</button>
        <h3>Archived auction lots</h3>
        <ul class="no-list-bullet-point" id="auction-lots-archived-list">
            for _, lot := range auctionLots {
                if !lot.IsActive {
                    @auctionLotListItem(&lot)
                    <hr />
                }
            }
        </ul>
    </section>
}

var auctionNameInput *form.Field = &form.Field{
	Name:            "name",
	Required:        true,
	ID:              "name-input",
	Type:            form.TextInputType,
	Placeholder:     "Auction name...",
	Autocomplete: form.OffAutocomplete,
}

var auctionDescriptionInput *form.Field = &form.Field{
	Name:            "description",
	Required:        true,
	ID:              "description-input",
	Type:            form.TextAreaInputType,
	Placeholder:     "Auction description...",
	Autocomplete: form.OffAutocomplete,
}

templ createAuctionForm(isNew bool, auction *types.Auction, errors map[string]string) {
    <form id="create-auction-form-1" hx-boost="true" hx-target="#main" hx-swap="outerHTML"
            if isNew {
                method="post" action="/auctions"
            } else {
                method="put" action={ utils.ConvertToTemplURL("auctions", auction.ID) }
            }
    >
        @form.Label("Name", auctionNameInput.ID) {
            if isNew {
                @form.Input(auctionNameInput.WithErrors(errors).Attributes(""))
            } else {
                @form.Input(auctionNameInput.WithErrors(errors).Attributes(auction.Name))
            }
            if errors != nil {
                if err, ok := errors[auctionNameInput.Name]; ok {
                    <small id={ auctionNameInput.AriaDescribedBy }>{ err }</small>
                }
            }
        }
        @form.Label("Description", auctionDescriptionInput.ID) {
            if isNew {
                @form.Input(auctionDescriptionInput.WithErrors(errors).Attributes(""))
            } else {
                @form.Input(auctionDescriptionInput.WithErrors(errors).Attributes(auction.Description))
            }
            if errors != nil {
                if err, ok := errors[auctionDescriptionInput.Name]; ok {
                    <small id={ auctionDescriptionInput.AriaDescribedBy }>{ err }</small>
                }
            }
        }
        <label for="private-input">
            <input
            if !isNew {
                checked?={ auction.IsPrivate }
            }
            type="checkbox" name="private" id="private-input" />
            Make it private
        </label>
        if isNew {
            <input type="submit" value="Create"/>
        } else {
            <input type="submit" value="Save Changes"/>
        }
    </form>
}

templ createAuctionPage() {
    @main() {
        <h2>Create your auction</h2>
        @createAuctionForm(true, nil, nil)
    }
}

templ myAuctionsPage(auctions []types.Auction) {
    @main() {
        <h2>Your auctions</h2>
        if len(auctions) == 0 {
            <p>You have no auctions yet.</p>
            <a href="/auctions/new" hx-boost="true" class="secondary" role="button" hx-target="#main" hx-swap="outerHTML">Make one!</a>
        }
        <ul>
            for _, a := range auctions {
                if a.IsActive {
                    @auctionListItem(&a)
                }
            }
        </ul>
        <h3>Archive</h3>
        <ul>
            for _, a := range auctions {
                if !a.IsActive {
                    @auctionListItem(&a)
                }
            }
        </ul>
        <dialog id="confirm-archive-dialog">
            <article>
                <header>
                    <button
                    aria-label="Close"
                    rel="prev"
                    value="cancel"
                    onclick="toggleModal(event)"
                    ></button>
                    <h3>Confirm your action!</h3>
                </header>
                <p>
                    Do you really want to archive this auction?
                </p>
                <footer>
                    <button
                    role="button"
                    class="secondary"
                    onclick="toggleModal(event)"
                    value="cancel"
                    >
                        Cancel
                    </button>
                    <button value="confirm" autofocus onclick="toggleModal(event)">
                        Confirm
                    </button>
                </footer>
            </article>
        </dialog>
        <dialog id="confirm-reinstate-dialog">
            <article>
                <header>
                    <button
                    aria-label="Close"
                    rel="prev"
                    value="cancel"
                    onclick="toggleModal(event)"
                    ></button>
                    <h3>Confirm your action!</h3>
                </header>
                <p>
                    Do you really want to reinstate this auction?
                </p>
                <footer>
                    <button
                    role="button"
                    class="secondary"
                    onclick="toggleModal(event)"
                    value="cancel"
                    >
                        Cancel
                    </button>
                    <button value="confirm" autofocus onclick="toggleModal(event)">
                        Confirm
                    </button>
                </footer>
            </article>
        </dialog>
    }
}

templ auctionListItem(auction *types.Auction) {
    <li id={ "auction-list-item-" + utils.IdToString(auction.ID) } class="grid narrow-row">
        <h4><a
            if auction.IsActive {
                class="contrast"
            } else {
                class="secondary"
            }
            href={ utils.ConvertToTemplURL("my-auctions", auction.ID, "edit") } >{ auction.Name }</a></h4>
        <div class="auction-controls">
            <div role="group">
                <input
                if !auction.IsActive {
                    disabled
                }
                type="button"
                value="Edit"
                hx-swap="outerHTML"
                hx-push-url="true"
                hx-target="#main"
                hx-get={ utils.ConvertToTemplStringURL("my-auctions", auction.ID, "edit") }
                />
                <input
                type="button"
                if auction.IsActive {
                    value="Archive"
                    hx-post={ utils.ConvertToTemplStringURL("auctions", auction.ID, "archive") }
                    hx-confirm="confirm-archive-dialog"
                } else {
                    value="Reinstate"
                    hx-post={ utils.ConvertToTemplStringURL("auctions", auction.ID, "reinstate") }
                    hx-confirm="confirm-reinstate-dialog"
                }
                data-confirm-trigger="true"
                class="secondary"
                hx-swap="outerHTML"
                hx-target="#main"/>
            </div>
        </div>
    </li>
}

templ auctionsList(pageParam *types.AuctionsListPageParameter) {
    @main() {
        <section>
            <h2>
                Find yourself an auction
            </h2>
            <form hx-pusl-url="true" role="search" hx-get="/auctions" hx-target="#main" hx-swap="outerHTML">
                <input id="search-input" name="name" type="search" placeholder="Search"
                if pageParam.Filter.Name != "" {
                    value={ strings.Trim(pageParam.Filter.Name, "%") }
                }
                />
                <input type="submit" value="Search" />
            </form>
        </section>
        <section>
            <hgroup>
                <h2>
                    if pageParam.CategoryName != "" {
                        { pageParam.CategoryName + " Auctions" }
                    } else {
                        Auctions
                    }
                </h2>
                <h3>
                    if pageParam.AuctionsFound > 1 {
                        We have found { utils.IntToString(pageParam.AuctionsFound) } auctions
                    } else if pageParam.AuctionsFound == 1 {
                        We have found 1 auction
                    } else {
                        We couldn't find any auctions using this criteria
                    }
                </h3>
            </hgroup>
            <hr />
            <section>
                <ul>
                    for _, a := range pageParam.Auctions {
                        <li>
                            <hgroup style="margin-bottom: 0;">
                                <h5><a hx-boost="true" href={ utils.ConvertToTemplURL("auctions", utils.IdToString(a.ID), "view") }>{ a.Name }</a></h5>
                                <p>Created at: { a.CreatedAt.Format("15:04 Mon, the 2 of Jan") }</p>
                            </hgroup>
                            <p class="cut-to-two-rows">
                                { a.Description }
                            </p>
                        </li>
                    }
                </ul>
            </section>
        </section>
    }
}
